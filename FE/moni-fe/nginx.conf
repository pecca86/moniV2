# server {
#   listen 80;
#   location / {
#     root   /usr/share/nginx/html;
#     index  index.html index.htm;
#     try_files $uri $uri/ /index.html =404;
#   }
# }

# server {
#   listen 80;

#   # redirect root to login page
#   location = / {
#     return 302 /login;
#   }
  
#   # Proxy API requests to backend
#   location /api/ {
#     proxy_pass http://moni-be:8080;
#     proxy_set_header Host $host;
#     proxy_set_header X-Real-IP $remote_addr;
#   }
  
#   location / {
#     root   /usr/share/nginx/html;
#     index  index.html index.htm;
#     try_files $uri $uri/ /index.html =404;
#   }
# }

# Local Kubernetes Nginx configuration for moni-fe
# This configuration serves the React frontend and proxies API requests to the backend service.
# It includes CORS headers and handles OPTIONS requests properly.
# The backend service is accessed using the full Kubernetes DNS name.
# This file is used in the moni-fe deployment in the moni namespace.
# Ensure this file is mounted correctly in the Nginx container.
# The Nginx server listens on port 80 and serves static files from /usr/share/nginx/html.
# API requests to /api/ are proxied to the moni-be service at moni-be.moni.svc.cluster.local:8080.
# CORS headers are added to allow cross-origin requests from any origin.
# OPTIONS requests are handled to avoid CORS preflight issues.
server {
  listen 80;
  
  # Static files
  location / {
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html =404;
  }
  
  # API proxy with proper Kubernetes service DNS
  location /api/ {
    # Use full Kubernetes DNS name instead of short name
    proxy_pass http://moni-be.moni.svc.cluster.local:8080;
    
    # Kubernetes-specific headers
    proxy_set_header Host moni-be.moni.svc.cluster.local;
    proxy_set_header Origin "";  # Clear origin to avoid CORS issues
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Complete CORS headers for all responses
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
    
    # Handle OPTIONS with complete headers BEFORE returning
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
      add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
      add_header 'Access-Control-Max-Age' '1728000' always;
      add_header 'Content-Type' 'text/plain charset=UTF-8' always;
      add_header 'Content-Length' '0' always;
      return 204;
    }
  }
}